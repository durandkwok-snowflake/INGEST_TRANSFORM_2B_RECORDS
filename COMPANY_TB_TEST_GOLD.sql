USE DATABASE COMPANY_TB_TEST;
USE SCHEMA GOLD;

    

-- 1. Total Revenue and Gross Profit by Quarter
CREATE OR REPLACE DYNAMIC TABLE COMPANY_TB_TEST.GOLD.QUARTERLY_SALES_SUMMARY
 target_lag = '20 minutes' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
AS
SELECT 
    D_QUARTER_NAME,
    SUM(TOTAL_REVENUE) AS TOTAL_REVENUE,
    SUM(GROSS_PROFIT) AS TOTAL_GROSS_PROFIT,
    AVG(GROSS_PROFIT) AS AVG_GROSS_PROFIT
FROM 
    COMPANY_TB_TEST.SILVER.BILLION_RECORDS_ENRICHED
GROUP BY 
    D_QUARTER_NAME
ORDER BY 
    D_QUARTER_NAME;




-- 2. Profit Categories by Store
CREATE OR REPLACE DYNAMIC TABLE COMPANY_TB_TEST.GOLD.STORE_PROFIT_CATEGORY_SUMMARY
 target_lag = '20 minutes' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
AS
SELECT 
    SS_STORE_SK,
    PROFIT_CATEGORY,
    COUNT(*) AS TRANSACTION_COUNT,
    SUM(TOTAL_REVENUE) AS TOTAL_REVENUE,
    SUM(GROSS_PROFIT) AS TOTAL_GROSS_PROFIT
FROM 
    COMPANY_TB_TEST.SILVER.BILLION_RECORDS_ENRICHED
GROUP BY 
    SS_STORE_SK, PROFIT_CATEGORY
ORDER BY 
    SS_STORE_SK, PROFIT_CATEGORY;



-- 3. Customer-Level Revenue and Discount Insights
CREATE OR REPLACE DYNAMIC TABLE COMPANY_TB_TEST.GOLD.CUSTOMER_SALES_SUMMARY
 target_lag = '20 minutes' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
AS
SELECT 
    C_CUSTOMER_ID,
    C_FIRST_NAME,
    C_LAST_NAME,
    COUNT(*) AS TOTAL_TRANSACTIONS,
    SUM(TOTAL_REVENUE) AS TOTAL_REVENUE,
    SUM(TOTAL_DISCOUNT) AS TOTAL_DISCOUNT,
    AVG(TOTAL_REVENUE) AS AVG_REVENUE_PER_TRANSACTION,
    AVG(TOTAL_DISCOUNT) AS AVG_DISCOUNT_PER_TRANSACTION
FROM 
    COMPANY_TB_TEST.SILVER.BILLION_RECORDS_ENRICHED
GROUP BY 
    C_CUSTOMER_ID, C_FIRST_NAME, C_LAST_NAME
ORDER BY 
    TOTAL_REVENUE DESC;



-- 4. Daily Revenue and Profit Trend
CREATE OR REPLACE DYNAMIC TABLE COMPANY_TB_TEST.GOLD.DAILY_REVENUE_TRENDS
 target_lag = '20 minutes' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
AS
SELECT 
    D_DATE,
    SUM(TOTAL_REVENUE) AS TOTAL_REVENUE,
    SUM(GROSS_PROFIT) AS TOTAL_GROSS_PROFIT,
    COUNT(*) AS TRANSACTION_COUNT
FROM 
    COMPANY_TB_TEST.SILVER.BILLION_RECORDS_ENRICHED
GROUP BY 
    D_DATE
ORDER BY 
    D_DATE;



-- 5. High Discount Transactions Analysis
CREATE OR REPLACE DYNAMIC TABLE COMPANY_TB_TEST.GOLD.HIGH_DISCOUNT_ANALYSIS
 target_lag = '20 minutes' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
AS
SELECT 
    SS_STORE_SK,
    D_DATE,
    COUNT(*) AS HIGH_DISCOUNT_COUNT,
    SUM(TOTAL_REVENUE) AS TOTAL_REVENUE,
    SUM(GROSS_PROFIT) AS TOTAL_GROSS_PROFIT
FROM 
    COMPANY_TB_TEST.SILVER.BILLION_RECORDS_ENRICHED
WHERE 
    DISCOUNT_CATEGORY = 'High Discount'
GROUP BY 
    SS_STORE_SK, D_DATE
ORDER BY 
    HIGH_DISCOUNT_COUNT DESC;



    


